name: Deploy to Production Only EC2 With Manual Trigger

on:
  workflow_dispatch:
    inputs:
      project_name:
        description: 'Deploy to Production Manually'
        required: false

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: production

    steps:
    - name: Check out code
      uses: actions/checkout@v2

    - name: Setup Node.js environment
      uses: actions/setup-node@v4.0.2
      with:
        node-version: 20
    
    - name: Install Docker Compose
      run: |
        sudo curl -L "https://github.com/docker/compose/releases/download/1.29.2/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
        sudo chmod +x /usr/local/bin/docker-compose

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Update EC2 service
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.AWS_EC2_HOST }}
        username: ${{ secrets.AWS_EC2_USERNAME }}
        key: ${{ secrets.AWS_EC2_SSH_KEY }}
        envs: AWS_ACCESS_KEY_ID,AWS_SECRET_ACCESS_KEY,AWS_DEFAULT_REGION,AWS_EC2_USERNAME
        script: |
          export AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}
          export AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}
          export AWS_DEFAULT_REGION=${{ secrets.AWS_REGION }}
          
          # ECR에 로그인 (AWS CLI 버전 2)
          aws ecr get-login-password --region $AWS_DEFAULT_REGION | docker login --username AWS --password-stdin ${{ steps.login-ecr.outputs.registry }}
          IMAGE_URIS="${{ steps.build-image.outputs.image_uris }}"
          
          # Nginx 이미지 먼저 pull 및 실행
          NGINX_IMAGE_URI="${{ steps.login-ecr.outputs.registry }}/${{ secrets.AWS_ECR_REPOSITORY }}:front-nginx-latest"
          docker pull $NGINX_IMAGE_URI
          docker run -d --name nginx -p 80:80 $NGINX_IMAGE_URI
          
          IFS=';' read -ra ADDR <<< "$IMAGE_URIS"
          for i in "${ADDR[@]}"; do
            IFS='=' read -ra PROJECT_AND_URI <<< "$i"
            PROJECT="${PROJECT_AND_URI[0]}"
            IMAGE_URI="${PROJECT_AND_URI[1]}"
            
            # Nginx 이미 실행했으므로 건너뜀
            if [ "$PROJECT" == "front-nginx-latest" ]; then
              continue
            fi
    
            LOCAL_IMAGE="${PROJECT#front-}"
            LOCAL_IMAGE="${LOCAL_IMAGE%-latest}"

            # 기존에 실행 중인 컨테이너가 있으면 중지 및 삭제
            if [ $(docker ps -aq -f name=$LOCAL_IMAGE) ]; then
              docker stop $LOCAL_IMAGE
              docker rm $LOCAL_IMAGE
            fi
    
            if [ -n "$PROJECT" ] && [ -n "$IMAGE_URI" ]; then
              docker pull $IMAGE_URI
              docker tag $IMAGE_URI $PROJECT
              docker run -d --name $LOCAL_IMAGE $PROJECT:latest
            fi
          done