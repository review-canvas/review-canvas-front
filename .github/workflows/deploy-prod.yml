name: Deploy to Production on Change

on:
  push:
    branches:
      - main
      - develop
    paths:
      - 'apps/web/**'
      - 'apps/shop-admin/**'
      - 'apps/super-admin/**'
  workflow_dispatch:
    inputs:
      project_name:
        description: 'Deploy to Production Manually'
        required: false

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: production

    steps:
    - name: Check out code
      uses: actions/checkout@v2

    - name: Setup Node.js environment
      uses: actions/setup-node@v4.0.2
      with:
        node-version: 20
    
    - name: Install Docker Compose
      run: |
        sudo curl -L "https://github.com/docker/compose/releases/download/1.29.2/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
        sudo chmod +x /usr/local/bin/docker-compose

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build, tag, and push image to Amazon ECR
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: latest
        AWS_ECR_REPOSITORY: ${{ secrets.AWS_ECR_REPOSITORY }}
      run: |
          docker-compose build
          services=$(docker-compose config --services)
          image_uris=""
    
          for service in $services; do
            ecr_image_name="$ECR_REGISTRY/$AWS_ECR_REPOSITORY:front-$service-latest"

            docker tag $service $ecr_image_name
      
            docker push $ecr_image_name

            image_uris+="$service=$ecr_image_name;"
          done

          echo "::set-output name=image_uris::$image_uris"
    
    - name: Update EC2 service
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.AWS_EC2_HOST }}
        username: ${{ secrets.AWS_EC2_USERNAME }}
        key: ${{ secrets.AWS_EC2_SSH_KEY }}
        script: |
          # ECR에 로그인 (AWS CLI 버전 2)
          aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | docker login --username AWS --password-stdin ${{ steps.login-ecr.outputs.registry }}
          
          IMAGE_URIS="${{ steps.build-image.outputs.image_uris }}"
          IFS=';' read -ra ADDR <<< "$IMAGE_URIS"
          for i in "${ADDR[@]}"; do
            IFS='=' read -ra PROJECT_AND_URI <<< "$i"
            PROJECT="${PROJECT_AND_URI[0]}"
            IMAGE_URI="${PROJECT_AND_URI[1]}"

            LOCAL_IMAGE="${PROJECT#front-}"
            LOCAL_IMAGE="${LOCAL_IMAGE%-latest}:latest"

            if [ -n "$PROJECT" ] && [ -n "$IMAGE_URI" ]; then
              docker pull $IMAGE_URI
              docker tag $IMAGE_URI $PROJECT:latest
              docker-compose -f docker-compose.yml up -d $LOCAL_IMAGE
            fi
          done
